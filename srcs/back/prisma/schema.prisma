// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  image        String
  twoFaEnabled Boolean @default(false) @map("two_fa_enabled")
  twoFaSecret  String? @map("two_fa_secret")
  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  elo          Int    @default(500)

  expiresAt DateTime? @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  channels Channel[]
  members  ChannelMember[]
  actions  ChannelAction[]
  messages ChannelMessage[]

  friend   Friends[] @relation("friend")
  friendOf Friends[] @relation("friendOf")

  participant1 Game[]      @relation("participant1")
  participant2 Game[]      @relation("participant2")
  blocker      BlockList[] @relation("user_block")
  blocked      BlockList[] @relation("user_blocked")

  @@map("users")
}

model Friends {
  friend     User      @relation("friend", fields: [friendId], references: [id])
  friendId   Int       @map("friend_id")
  friendOf   User      @relation("friendOf", fields: [friendOfId], references: [id])
  friendOfId Int       @map("friend_of_id")
  confirmed  Boolean   @default(false)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@id([friendId, friendOfId])
  @@map("friends")
}

model ChannelMessage {
  id         Int       @id @default(autoincrement())
  content    String
  sender     User      @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   Int       @map("sender_id")
  channel    Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameInvite Boolean   @default(false) @map("game_invite")
  channelId  String    @map("channel_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([senderId, channelId])
  @@map("channel_messages")
}

model Channel {
  id        String           @id @default(uuid())
  name      String?          @unique
  password  String?
  type      ChannelType      @default(public)
  owner     User?            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int?             @map("owner_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")
  members   ChannelMember[]
  actions   ChannelAction[]
  messages  ChannelMessage[]

  @@index([name, ownerId])
  @@map("channels")
}

model BlockList {
  user      User      @relation("user_block", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int       @map("user_id")
  blocked   User      @relation("user_blocked", fields: [blockedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockedId Int       @map("blocked_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([userId, blockedId])
  @@map("block_list")
}

model ChannelMember {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int       @map("user_id")
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String    @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  present   Boolean   @default(true)
  role      Role      @default(user)

  @@id([userId, channelId])
  @@map("channel_members")
}

model ChannelAction {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int       @map("user_id")
  channel   Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String    @map("channel_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([channelId, userId])
  @@map("channel_actions")
}

model Game {
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  id             Int     @id @default(autoincrement())
  participant1Id Int
  participant2Id Int
  winner_id      Int?
  scoreP1        Int?
  scoreP2        Int?
  gametype       String?
  exchangeCount  Int     @default(0) @map("exchange_count")
  participant1   User    @relation("participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2   User    @relation("participant2", fields: [participant2Id], references: [id], onDelete: Cascade)

  @@map("games")
}

enum ChannelType {
  public
  private
  protected
  direct
}

enum Role {
  owner
  user
  admin
}